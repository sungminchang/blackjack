// Generated by CoffeeScript 1.9.0
var __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

window.Hand = (function(_super) {
  __extends(Hand, _super);

  function Hand() {
    return Hand.__super__.constructor.apply(this, arguments);
  }

  Hand.prototype.model = Card;

  Hand.prototype.initialize = function(array, _at_deck, _at_isDealer) {
    this.deck = _at_deck;
    this.isDealer = _at_isDealer;
    this.bust = false;
  };

  Hand.prototype.hit = function() {
    this.add(this.deck.pop());
    this.scores();
    if (this.bust) {
      return this.trigger('change:bust');
    }
  };

  Hand.prototype.busted = function() {
    return this.bust;
  };

  Hand.prototype.stand = function() {
    return this.trigger('change:stand');
  };

  Hand.prototype.hasAce = function() {
    return this.reduce(function(memo, card) {
      return memo || card.get('value') === 1;
    }, 0);
  };

  Hand.prototype.minScore = function() {
    return this.reduce(function(score, card) {
      return score + (card.get('revealed') ? card.get('value') : 0);
    }, 0);
  };

  Hand.prototype.scores = function() {
    if (this.minScore() > 21) {
      this.bust = true;
      return [this.minScore()];
    }
    if (!this.hasAce()) {
      return [this.minScore()];
    } else if (this.minScore() + 10 <= 21) {
      return [this.minScore() + 10];
    } else {
      return [this.minScore()];
    }
  };

  return Hand;

})(Backbone.Collection);
